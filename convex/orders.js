import { query } from "./_generated/server"; // C·∫¶N IMPORT query!
import LOOKUP_DATA from "../data/Lookup"
import { mutation } from "./_generated/server";
import { v } from "convex/values";
import { action } from "./_generated/server";

export const CreateOrder = mutation({
  args: {
    userId: v.id("users"),  // ‚úÖ D√πng v.id("users")
    amount: v.number(),
    currencyCode: v.string(),
    status: v.string(),
    createdAt: v.optional(v.string()),
    transId: v.optional(v.string()),  
    expiryDate: v.optional(v.string()),  // ‚úÖ Th√™m ng√†y h·∫øt h·∫°n
  },
  handler: async (ctx, args) => {
    const user = await ctx.db.get(args.userId);
    if (!user) {
      throw new Error("User kh√¥ng t·ªìn t·∫°i!");
    }

    const expiryDate = new Date();
    expiryDate.setDate(expiryDate.getDate() + 30);
    const expiryDateString = expiryDate.toISOString();

    const order = await ctx.db.insert("orders", {
      userId: args.userId,
      amount: args.amount,
      currencyCode: args.currencyCode,
      status: args.status,
      createdAt: args.createdAt || new Date().toISOString(),
      transId: args.transId || null,
      expiryDate: expiryDateString, 
    });

    return order;
  },
});

export const UpdateToken = mutation({
  args: {
    userId: v.id("users"),
    token: v.number(),
  },
  handler: async (ctx, args) => {
    const user = await ctx.db.get(args.userId);
    if (!user) {
      throw new Error("User kh√¥ng t·ªìn t·∫°i!");
    }

    const updatedToken = (user.token || 0) + args.token;
    await ctx.db.patch(args.userId, { token: updatedToken });

    console.log(`‚úÖ ƒê√£ c·∫≠p nh·∫≠t token cho userId: ${args.userId}, T·ªïng token: ${updatedToken}`);

    return { success: true, newToken: updatedToken };
  },
});
//Gi·ªõi h·∫°n l·∫•y 5 ƒë∆°n h√†ng m·ªõi nh·∫•t: truongan
export const getLatestCustomers = query(async ({ db }) => {
  // L·∫•y t·∫•t c·∫£ ƒë∆°n h√†ng, sau ƒë√≥ l·ªçc status === "success" (t·ªëi ∆∞u h∆°n n·∫øu c√≥ createdAt ƒë·ªÉ s·∫Øp x·∫øp)
  const allOrders = await db.query("orders").collect();

  // Ch·ªâ l·∫•y 5 ƒë∆°n h√†ng m·ªõi nh·∫•t c√≥ status l√† "success"
  const latestOrders = allOrders
    .filter((order) => order.status === "success")
    .sort((a, b) => new Date(b.createdAt) - new Date(a.createdAt)) // S·∫Øp x·∫øp gi·∫£m d·∫ßn theo createdAt
    .slice(0, 5); // L·∫•y 5 ƒë∆°n g·∫ßn nh·∫•t

  console.log("üîπ ƒê∆°n h√†ng m·ªõi nh·∫•t:", latestOrders);

  // H√†m t√¨m plan
  // const findPlanByPrice = (price) => {
  //   const plan = LOOKUP_DATA.PRICING_OPTIONS.find(p => Math.floor(p.price_f) === Math.floor(price));
  //   return plan ? plan.name : "Mi·ªÖn ph√≠";
  // };

  // L·∫•y th√¥ng tin user + plan t·ª´ order
  const customers = await Promise.all(
    latestOrders.map(async (order) => {
      const user = await db.get(order.userId);
      return {
        name: user?.name || "Unknown",
        plan: findPlanByPrice(order.amount), // T√¨m g√≥i t
      };
    })
  );

  console.log(" Kh√°ch h√†ng g·∫ßn ƒë√¢y:", customers);
  return customers;
});

// T·ªïng doanh thu
export const getTotalRevenue = query(async ({ db }) => {
  const allOrders = await db.query("orders").collect();
  const totalRevenue = allOrders.reduce((sum, order) => sum + order.amount, 0);
  return totalRevenue;
});

// T·ªïng s·ªë l∆∞·ª£ng ƒë∆°n h√†ng
export const getTotalOrders = query(async ({ db }) => {
  return await db.query("orders").count();
});

// Ki·ªÉm tra v√† tr·ª´ token n·∫øu h·∫øt h·∫°n
export const checkAndDeductExpiredTokens = mutation(async ({ db }) => {
  const now = new Date();
  
  // ‚úÖ L·∫•y t·∫•t c·∫£ ƒë∆°n h√†ng ch∆∞a h·∫øt h·∫°n
  const validOrders = await db.query("orders")
    .filter(q => q.gte(q.field("expiryDate"), now.toISOString())) // L·ªçc ƒë∆°n h√†ng c√≤n h·∫°n
    .collect();

  // ‚úÖ L·∫•y t·∫•t c·∫£ user c√≥ ƒë∆°n h√†ng h·∫øt h·∫°n
  const expiredOrders = await db.query("orders")
    .filter(q => q.lt(q.field("expiryDate"), now.toISOString())) // L·ªçc ƒë∆°n h√†ng h·∫øt h·∫°n
    .collect();

  const affectedUsers = new Set(expiredOrders.map(order => order.userId));

  for (const userId of affectedUsers) {
    const user = await db.get(userId);
    if (user) {
      // ‚úÖ T√≠nh t·ªïng token t·ª´ c√°c ƒë∆°n h√†ng c√≤n h·∫°n
      const remainingToken = validOrders
        .filter(order => order.userId === userId)
        .reduce((sum, order) => sum + order.amount, 0);

      // ‚úÖ C·∫≠p nh·∫≠t token
      await db.patch(userId, { token: remainingToken });

      console.log(`‚úÖ ƒê√£ c·∫≠p nh·∫≠t token cho user: ${user.name}, S·ªë token c√≤n l·∫°i: ${remainingToken}`);
    }
  }
});


//// T√¨m ki·∫øm d·ªãch v·ª• ƒë√£ ƒëƒÉng k√Ω theo email ng∆∞·ªùi d√πng
export const searchOrdersByEmail = mutation({
  args: { email: v.string() },
  handler: async (ctx, args) => {
    const users = await ctx.db.query("users").collect();
    const matchedUsers = users.filter(user => user.email.toLowerCase().includes(args.email.toLowerCase()));

    if (matchedUsers.length === 0) return [];

    const userIds = matchedUsers.map(user => user._id);
    const orders = await ctx.db.query("orders").collect();
    const matchedOrders = orders.filter(order => userIds.includes(order.userId));

    return matchedOrders.map(order => {
      const user = matchedUsers.find(u => u._id === order.userId);
      return {
        _id: user?._id || "N/A",
        user: user?.name || "Unknown",
        email: user?.email || "N/A",
        registeredDate: order.createdAt,
        expiryDate: order.expiryDate,
        status: order.status,
        amount: order.amount,
      };
    });
  },
});


//lay tat ca don hang
export const getAllOrders = query(async ({ db }) => {
  return await db.query("orders").collect();
});

//dua vao pricing data lay plan
export const findPlanByPrice = (price) => {
  const plan = LOOKUP_DATA.PRICING_OPTIONS.find(p => Math.floor(p.price_f) === Math.floor(price));
  return plan ? plan.name : "Mi·ªÖn ph√≠";
};

