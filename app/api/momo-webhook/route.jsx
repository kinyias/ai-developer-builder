import { api, internal } from '@/convex/_generated/api'; // ‚úÖ Import t·ª´ `internal`
import { mutation } from '@/convex/_generated/server'; // ‚úÖ Import mutation ƒë·ªÉ g·ªçi Convex
import LOOKUP_DATA from '@/data/Lookup';
import { ConvexHttpClient } from "convex/browser";
const convex = new ConvexHttpClient(process.env.NEXT_PUBLIC_CONVEX_URL);
export async function POST(req) {
  try {
    const body = await req.json();
    console.log("üöÄ Nh·∫≠n request t·ª´ Momo Webhook!");
    console.log("üì• D·ªØ li·ªáu webhook t·ª´ Momo:", body);

    const { orderId, requestId, amount, orderInfo, transId, resultCode, message, extraData, tokens } = body;

    // ‚úÖ Ki·ªÉm tra n·∫øu giao d·ªãch th·∫•t b·∫°i
    if (resultCode !== 0) {
      console.error("‚ùå Giao d·ªãch th·∫•t b·∫°i:", message);
      return new Response(JSON.stringify({ message: "Giao d·ªãch th·∫•t b·∫°i", error: message }), { status: 400 });
    }

    // ‚úÖ L·∫•y userId t·ª´ extraData (ƒë∆∞·ª£c g·ª≠i t·ª´ `momo-payment`)
    const userId = extraData;
    if (!userId) {
      console.error("‚ùå Kh√¥ng t√¨m th·∫•y userId trong extraData!");
      return new Response(JSON.stringify({ message: "Kh√¥ng t√¨m th·∫•y userId" }), { status: 400 });
    }

    console.log(`‚úÖ X√°c nh·∫≠n giao d·ªãch cho userId: ${userId}, S·ªë ti·ªÅn: ${amount}`);

    // ‚úÖ L∆∞u ƒë∆°n h√†ng v√†o Convex Database
    // const createdOrder = await convex.mutation(api.workspace.CreateWorkspace, {
    //     user: userId,
    //     messages: [{role: "user", content:"working"}],
    // });
    const createdOrder = await convex.mutation(api.orders.CreateOrder, {
      userId,
      amount,
      currencyCode: "VND",
      status: "success",
      createdAt: new Date().toISOString(),
      transId: transId.toString(),
    });

     
      

    console.log("‚úÖ ƒê∆°n h√†ng ƒë√£ ƒë∆∞·ª£c t·∫°o th√†nh c√¥ng:", JSON.stringify(createdOrder));

    // ‚úÖ C·ªông th√™m token cho User d·ª±a tr√™n `Lookup`
    const pricingOption = LOOKUP_DATA.PRICING_OPTIONS.find(option => option.price_f === amount);
    if (!pricingOption) {
      console.error("‚ùå Kh√¥ng t√¨m th·∫•y g√≥i token ph√π h·ª£p v·ªõi s·ªë ti·ªÅn:", amount);
      return new Response(JSON.stringify({ message: "G√≥i n·∫°p kh√¥ng h·ª£p l·ªá" }), { status: 400 });
    }

    const tokenToAdd = pricingOption.value;
    console.log(`‚úÖ C·ªông th√™m ${tokenToAdd} token cho userId: ${userId}`);

    await convex.mutation(api.orders.UpdateToken, {
      userId,
      token: tokenToAdd,
    });


    console.log(`‚úÖ ƒê√£ c·∫≠p nh·∫≠t token th√†nh c√¥ng cho user: ${userId}`);

    return new Response(JSON.stringify({ message: "Giao d·ªãch th√†nh c√¥ng, ƒë∆°n h√†ng v√† token ƒë√£ ƒë∆∞·ª£c c·∫≠p nh·∫≠t!" }), { status: 200 });

  } catch (error) {
    console.error("‚ùå L·ªói x·ª≠ l√Ω webhook:", error);
    return new Response(JSON.stringify({ message: "L·ªói x·ª≠ l√Ω webhook", error: error.message }), { status: 500 });
  }
}
