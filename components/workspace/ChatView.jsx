'use client'; // Ch·ªâ ƒë·ªãnh r·∫±ng file n√†y s·∫Ω ch·∫°y tr√™n client-side.

import { useMessage } from '@/hooks/use-message'; // Hook qu·∫£n l√Ω state tin nh·∫Øn (kh√¥ng c·∫ßn thi·∫øt n·ªØa n·∫øu d√πng Convex).
import { useParams } from 'next/navigation'; // Hook l·∫•y tham s·ªë t·ª´ URL.
import React, { useEffect, useState } from 'react';
import { Avatar, AvatarFallback, AvatarImage } from '../ui/avatar'; // Th√†nh ph·∫ßn hi·ªÉn th·ªã ·∫£nh ƒë·∫°i di·ªán.
import { Button } from '../ui/button'; // Th√†nh ph·∫ßn n√∫t b·∫•m t·ª´ UI library.
import { ArrowRight, Loader2Icon } from 'lucide-react'; // Bi·ªÉu t∆∞·ª£ng m≈©i t√™n ƒë·ªÉ g·ª≠i tin nh·∫Øn.
import { cn } from '@/lib/utils'; // H√†m ti·ªán √≠ch ƒë·ªÉ k·∫øt h·ª£p className.
import axios from 'axios'; // Th∆∞ vi·ªán g·ª≠i request HTTP.
import Prompt from '@/data/Prompt'; // Prompt m·∫∑c ƒë·ªãnh cho AI.
import ReactMarkdown from 'react-markdown'; // Th∆∞ vi·ªán ƒë·ªÉ hi·ªÉn th·ªã n·ªôi dung markdown.

import { useMutation, useQuery } from 'convex/react'; // Hook ƒë·ªÉ t∆∞∆°ng t√°c v·ªõi Convex.
import { api } from '@/convex/_generated/api'; // API t·ª´ Convex ƒë·ªÉ truy v·∫•n v√† c·∫≠p nh·∫≠t d·ªØ li·ªáu.
import { useUserDetail } from '../../app/context/UserDetailContext';

export const countToken = (inputText) => {
  return inputText
    .trim()
    .split(/\s+/)
    .filter((word) => word).length; //h√†m ƒë·∫øm token
};

export default function ChatView() {
  const { id } = useParams(); // L·∫•y workspace ID t·ª´ URL.
  const [userInput, setUserInput] = useState(''); // State l∆∞u tin nh·∫Øn do ng∆∞·ªùi d√πng nh·∫≠p v√†o.
  const [loading, setLoading] = useState(false);

  // L·∫•y danh s√°ch tin nh·∫Øn t·ª´ Convex d·ª±a v√†o workspace ID.
  const messages =
    useQuery(api.workspace.GetMessages, { workspaceId: id }) || [];
  const { userDetail, setUserDetail } = useUserDetail(); // üí° L·∫•y user chi ti·∫øt t·ª´ Context

  // T·∫°o mutation ƒë·ªÉ c·∫≠p nh·∫≠t tin nh·∫Øn l√™n Convex.
  const updateMessages = useMutation(api.workspace.UpdateMessages);
  //T·∫°o c√°i n√†y ƒë·ªÉ c·∫≠p nh·∫≠t token
  const UpdateTokens = useMutation(api.users.UpdateToken);

  // useEffect ƒë·ªÉ ki·ªÉm tra n·∫øu tin nh·∫Øn cu·ªëi c√πng l√† c·ªßa user th√¨ g·ªçi AI ph·∫£n h·ªìi.
  useEffect(() => {
    if (messages.length > 0) {
      const lastMessage = messages[messages.length - 1]; // L·∫•y tin nh·∫Øn cu·ªëi c√πng trong danh s√°ch.
      if (lastMessage.role === 'user') {
        getAIResponse(); // G·ªçi AI tr·∫£ l·ªùi.
      }
    }
  }, [messages]); // useEffect s·∫Ω ch·∫°y l·∫°i khi `messages` thay ƒë·ªïi.

  // H√†m g·ª≠i tin nh·∫Øn c·ªßa AI
  const getAIResponse = async () => {
    setLoading(true);
    // T·∫°o prompt t·ª´ danh s√°ch tin nh·∫Øn hi·ªán t·∫°i.
    const PROMPT = JSON.stringify(messages) + ': ' + Prompt.CHAT_PROMPT;

    // G·ª≠i request ƒë·∫øn API AI ƒë·ªÉ sinh c√¢u tr·∫£ l·ªùi.
    const result = await axios.post('/api/ai-chat', {
      prompt: PROMPT,
    });

    // T·∫°o ƒë·ªëi t∆∞·ª£ng tin nh·∫Øn c·ªßa AI.
    const aiMessage = {
      role: 'ai',
      content: result.data.result, // N·ªôi dung tr·∫£ v·ªÅ t·ª´ AI.
    };

    // C·∫≠p nh·∫≠t tin nh·∫Øn l√™n Convex, bao g·ªìm c·∫£ tin nh·∫Øn m·ªõi c·ªßa AI.
    await updateMessages({
      workspaceId: id,
      messages: [...messages, aiMessage],
    });

    //C·∫≠p nh·∫≠t token c·ªßa user
    //token hi·ªán t·∫°i tr·ª´ cho token AI ph·∫©n h·ªìi(chuy·ªÉn th√†nh chu·ªói Json ƒë·ªÉ d·∫øm b·∫±ng h√†m countToken)
    const token =
      Number(userDetail?.token) - Number(countToken(JSON.stringify(aiMessage)));
    if (userDetail?._id && !isNaN(token)) {
      await UpdateTokens({
        userId: userDetail._id,
        token: token,
      });
      setLoading(false);
    } else {
      console.error('L·ªói: userId ho·∫∑c token kh√¥ng h·ª£p l·ªá!', {
        userId: userDetail?._id,
        token,
      });
    }
  };

  // H√†m x·ª≠ l√Ω khi nh·∫•n ph√≠m Enter ƒë·ªÉ g·ª≠i tin nh·∫Øn.
  const handleKeyDown = async (e) => {
    if (e.key === 'Enter' && !e.shiftKey) {
      // Ki·ªÉm tra n·∫øu nh·∫•n Enter m√† kh√¥ng gi·ªØ Shift.
      e.preventDefault(); // NgƒÉn ch·∫∑n h√†nh vi m·∫∑c ƒë·ªãnh c·ªßa Enter (xu·ªëng d√≤ng).

      // T·∫°o ƒë·ªëi t∆∞·ª£ng tin nh·∫Øn t·ª´ ng∆∞·ªùi d√πng.
      const newMessage = {
        role: 'user',
        content: userInput,
      };

      setUserInput(''); // X√≥a n·ªôi dung nh·∫≠p sau khi g·ª≠i.

      try {
        // G·ª≠i tin nh·∫Øn l√™n Convex.
        await updateMessages({
          workspaceId: id,
          messages: [...messages, newMessage],
        });
      } catch (error) {
        console.error('L·ªói khi c·∫≠p nh·∫≠t tin nh·∫Øn:', error);
      }
    }
  };

  return (
    <div className="relative h-[85vh] flex flex-col">
      <div className="flex-1 overflow-y-scroll scrollbar-hide">
        {messages.map((msg, index) => (
          <div
            key={index}
            className="flex items-center gap-3 p-3 rounded-lg mb-2 leading-7 bg-gray-800 dark:bg-secondary text-white"
          >
            {msg.role === 'user' && (
              <Avatar>
                <AvatarImage src="https://github.com/shadcn.png" />
                <AvatarFallback>CN</AvatarFallback>
              </Avatar>
            )}
            <div className="flex flex-col">
              <ReactMarkdown>{msg.content}</ReactMarkdown>
            </div>
          </div>
        ))}
        {loading && (
          <div className="p-3 round-lg mb-2 flex gap-2 items-center bg-gray-200 dark:bg-secondary">
            <Loader2Icon className="animate-spin" />
            <h2>Generating response...</h2>
          </div>
        )}
      </div>
      <div className="w-full my-8 relative overflow-hidden">
        <form className="relative">
          <div className="p-5 border rounded-xl w-full">
            <div className="flex gap-2">
              <textarea
                className="outline-none bg-transparent w-full h-32 max-h-56 resize-none mr-8"
                value={userInput}
                onChange={(e) => setUserInput(e.target.value)}
                onKeyDown={handleKeyDown}
                placeholder="How can I help you today?"
              ></textarea>
            </div>
          </div>

          <div
            className={cn(
              'absolute top-3 right-3 transition-all duration-300',
              userInput
                ? 'opacity-100 translate-x-0'
                : 'opacity-0 translate-x-4'
            )}
          >
            <Button
              type="submit"
              size="icon"
              className="bg-primary text-primary-foreground hover:bg-primary/90"
            >
              <ArrowRight className="h-5 w-5" />
            </Button>
          </div>
          <div
            className={cn(
              'absolute top-6 right-5 transition-all duration-300',
              userInput
                ? 'opacity-0 translate-x-4'
                : 'opacity-100 translate-x-0'
            )}
          >
            <div className="w-2 h-2 rounded-full bg-green-500 animate-pulse" />
          </div>
        </form>
      </div>
    </div>
  );
}
